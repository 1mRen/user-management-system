openapi: 3.0.0
info:
  title: Node.js Sign-up and Verification API
  description: Node.js and MySQL - API with email sign-up, verification, authentication and forgot password
  version: 1.0.0

servers:
  - url: http://localhost:4000
    description: Local development server

paths:
  /accounts/authenticate:
    post:
      summary: Authenticate account credentials and return a JWT token and a cookie with a refresh token
      description: Accounts must be verified before authenticating.
      operationId: authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "jason@example.com"
                password:
                  type: string
                  example: "pass123"
              required:
                - email
                - password
      responses:
        "200":
          description: Account details, a JWT access token and a refresh token cookie
          headers:
            Set-Cookie:
              description: "`refreshToken`"
              schema:
                type: string
                example: refreshToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550; Path=/; Expires=Tue, 16 Jun 2020 09:14:17 GMT; HttpOnly
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  title:
                    type: string
                    example: "Mr"
                  firstName:
                    type: string
                    example: "Jason"
                  lastName:
                    type: string
                    example: "Watmore"
                  email:
                    type: string
                    example: "jason@example.com"
                  role:
                    type: string
                    example: "Admin"
                  created:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
                  isVerified:
                    type: boolean
                    example: true
                  jwtToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y"
        "400":
          description: The email or password is incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email or password is incorrect"
  /accounts/refresh-token:
    post:
      summary: Use a refresh token to generate a new JWT token and a new refresh token
      description: The refresh token is sent and returned via cookies.
      operationId: refreshToken
      parameters:
        - in: cookie
          name: refreshToken
          description: The `refreshToken` cookie
          schema:
            type: string
            example: 51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550
      responses:
        "200":
          description: Account details, a JWT access token and a new refresh token cookie
          headers:
            Set-Cookie:
              description: "`refreshToken`"
              schema:
                type: string
                example: refreshToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550; Path=/; Expires=Tue, 16 Jun 2020 09:14:17 GMT; HttpOnly
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  title:
                    type: string
                    example: "Mr"
                  firstName:
                    type: string
                    example: "Jason"
                  lastName:
                    type: string
                    example: "Watmore"
                  email:
                    type: string
                    example: "jason@example.com"
                  role:
                    type: string
                    example: "Admin"
                  created:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
                  isVerified:
                    type: boolean
                    example: true
                  jwtToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y"
        "400":
          description: The refresh token is invalid, revoked or expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid token"
  /accounts/revoke-token:
    post:
      summary: Revoke a refresh token
      description: Admin users can revoke the tokens of any account, regular users can only revoke their own tokens.
      operationId: revokeToken
      security:
        - bearerAuth: []
      parameters:
        - in: cookie
          name: refreshToken
          description: The refresh token can be sent in a cookie or the post body, if both are sent the token in the body is used.
          schema:
            type: string
            example: 51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550"
      responses:
        "200":
          description: The refresh token was successfully revoked
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token revoked"
        "400":
          description: The refresh token is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid token"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /accounts/register:
    post:
      summary: Register a new user account and send a verification email
      description: The first account registered in the system is assigned the `Admin` role, other accounts are assigned the `User` role.
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Mr"
                firstName:
                  type: string
                  example: "Jason"
                lastName:
                  type: string
                  example: "Watmore"
                email:
                  type: string
                  example: "jason@example.com"
                password:
                  type: string
                  example: "pass123"
                confirmPassword:
                  type: string
                  example: "pass123"
                acceptTerms:
                  type: boolean
              required:
                - title
                - firstName
                - lastName
                - email
                - password
                - confirmPassword
                - acceptTerms
      responses:
        "200":
          description: The registration request was successful and a verification email has been sent to the specified email address
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Registration successful, please check your email for verification instructions"
  /accounts/verify-email:
    post:
      summary: Verify a new account with a verification token received by email after registration
      operationId: verifyEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "3c7f8d9c4cb348ff95a0b74a1452aa24fc9611bb76768bb9eafeeb826ddae2935f1880bc7713318f"
              required:
                - token
      responses:
        "200":
          description: Verification was successful so you can now login to the account
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Verification successful, you can now login"
        "400":
          description: Verification failed due to an invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Verification failed"
  /accounts/forgot-password:
    post:
      summary: Submit email address to reset the password on an account
      operationId: forgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "jason@example.com"
              required:
                - email
      responses:
        "200":
          description: The request was received and an email has been sent to the specified address with password reset instructions (if the email address is associated with an account)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Please check your email for password reset instructions"
  /accounts/validate-reset-token:
    post:
      summary: Validate the reset password token received by email after submitting to the /accounts/forgot-password route
      operationId: validateResetToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "3c7f8d9c4cb348ff95a0b74a1452aa24fc9611bb76768bb9eafeeb826ddae2935f1880bc7713318f"
              required:
                - token
      responses:
        "200":
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token is valid"
        "400":
          description: Token is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid token"
  /accounts/reset-password:
    post:
      summary: Reset the password for an account
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "3c7f8d9c4cb348ff95a0b74a1452aa24fc9611bb76768bb9eafeeb826ddae2935f1880bc7713318f"
                password:
                  type: string
                  example: "newPass123"
                confirmPassword:
                  type: string
                  example: "newPass123"
              required:
                - token
                - password
                - confirmPassword
      responses:
        "200":
          description: Password reset was successful so you can now login to the account with the new password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset successful, you can now login"
        "400":
          description: Password reset failed due to an invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid token"
  /accounts:
    get:
      summary: Get a list of all accounts
      description: Restricted to admin users.
      operationId: getAllAccounts
      security:
        - bearerAuth: []
      responses:
        "200":
          description: An array of all accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "5eb12e197e06a76ccdefc121"
                    title:
                      type: string
                      example: "Mr"
                    firstName:
                      type: string
                      example: "Jason"
                    lastName:
                      type: string
                      example: "Watmore"
                    email:
                      type: string
                      example: "jason@example.com"
                    role:
                      type: string
                      example: "Admin"
                    created:
                      type: string
                      example: "2020-05-05T09:12:57.848Z"
                    updated:
                      type: string
                      example: "2020-05-08T03:11:21.553Z"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      summary: Create a new account
      description: Restricted to admin users.
      operationId: createAccount
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Mr"
                firstName:
                  type: string
                  example: "Jason"
                lastName:
                  type: string
                  example: "Watmore"
                email:
                  type: string
                  example: "jason@example.com"
                password:
                  type: string
                  example: "pass123"
                confirmPassword:
                  type: string
                  example: "pass123"
                role:
                  type: string
                  enum: [Admin, User]
              required:
                - title
                - firstName
                - lastName
                - email
                - password
                - confirmPassword
                - role
      responses:
        "200":
          description: Account created successfully, verification is not required for accounts created with this endpoint. The details of the new account are returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  title:
                    type: string
                    example: "Mr"
                  firstName:
                    type: string
                    example: "Jason"
                  lastName:
                    type: string
                    example: "Watmore"
                  email:
                    type: string
                    example: "jason@example.com"
                  role:
                    type: string
                    example: "Admin"
                  created:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
        "400":
          description: Email is already registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email 'jason@example.com' is already registered"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /accounts/{id}:
    parameters:
      - in: path
        name: id
        description: Account id
        required: true
        example: "5eb12e197e06a76ccdefc121"
        schema:
          type: string
    get:
      summary: Get a single account by id
      description: Admin users can access any account, regular users are restricted to their own account.
      operationId: getAccountById
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Details of the specified account
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  title:
                    type: string
                    example: "Mr"
                  firstName:
                    type: string
                    example: "Jason"
                  lastName:
                    type: string
                    example: "Watmore"
                  email:
                    type: string
                    example: "jason@example.com"
                  role:
                    type: string
                    example: "Admin"
                  created:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
                  updated:
                    type: string
                    example: "2020-05-08T03:11:21.553Z"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    put:
      summary: Update an account
      description: Admin users can update any account including role, regular users are restricted to their own account and cannot update role.
      operationId: updateAccount
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Mr"
                firstName:
                  type: string
                  example: "Jason"
                lastName:
                  type: string
                  example: "Watmore"
                email:
                  type: string
                  example: "jason@example.com"
                password:
                  type: string
                  example: "pass123"
                confirmPassword:
                  type: string
                  example: "pass123"
                role:
                  type: string
                  enum: [Admin, User]
      responses:
        "200":
          description: Account updated successfully. The details of the updated account are returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  title:
                    type: string
                    example: "Mr"
                  firstName:
                    type: string
                    example: "Jason"
                  lastName:
                    type: string
                    example: "Watmore"
                  email:
                    type: string
                    example: "jason@example.com"
                  role:
                    type: string
                    example: "Admin"
                  created:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
                  updated:
                    type: string
                    example: "2020-05-08T03:11:21.553Z"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      summary: Delete an account
      description: Admin users can delete any account, regular users are restricted to their own account.
      operationId: deleteAccount
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Account deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Account deleted successfully"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  # Departments API
  /departments:
    get:
      summary: Get all departments
      description: Returns a list of all departments
      operationId: getAllDepartments
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of departments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Department"
              example:
                - id: 1
                  name: "IT Department"
                  description: "Handles IT operations"
                  code: "IT"
                  location: "Floor 3"
                  accountId: 1
                  createdAt: "2024-06-01T12:00:00Z"
                  updatedAt: "2024-06-01T12:00:00Z"
                - id: 2
                  name: "HR Department"
                  description: "Handles HR operations"
                  code: "HR"
                  location: "Floor 2"
                  accountId: 2
                  createdAt: "2024-06-01T12:00:00Z"
                  updatedAt: "2024-06-01T12:00:00Z"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      summary: Create a new department
      description: Admin only - Create a new department
      operationId: createDepartment
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDepartmentRequest"
            example:
              name: "IT Department"
              description: "Handles IT operations"
              code: "IT"
              location: "Floor 3"
              accountId: 1
      responses:
        "200":
          description: Department created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Department"
              example:
                id: 1
                name: "IT Department"
                description: "Handles IT operations"
                code: "IT"
                location: "Floor 3"
                accountId: 1
                createdAt: "2024-06-01T12:00:00Z"
                updatedAt: "2024-06-01T12:00:00Z"
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /departments/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: Department ID
    get:
      summary: Get department by ID
      description: Returns a single department by ID
      operationId: getDepartmentById
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Department details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Department"
              example:
                id: 1
                name: "IT Department"
                description: "Handles IT operations"
                code: "IT"
                location: "Floor 3"
                accountId: 1
                createdAt: "2024-06-01T12:00:00Z"
                updatedAt: "2024-06-01T12:00:00Z"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    put:
      summary: Update department
      description: Admin only - Update department details
      operationId: updateDepartment
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDepartmentRequest"
            example:
              name: "IT Department Updated"
              description: "Handles IT operations and support"
              code: "IT"
              location: "Floor 4"
              accountId: 1
      responses:
        "200":
          description: Department updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Department"
              example:
                id: 1
                name: "IT Department Updated"
                description: "Handles IT operations and support"
                code: "IT"
                location: "Floor 4"
                accountId: 1
                createdAt: "2024-06-01T12:00:00Z"
                updatedAt: "2024-06-02T12:00:00Z"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      summary: Delete department
      description: Admin only - Delete a department
      operationId: deleteDepartment
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Department deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Department deleted successfully"
              example:
                message: "Department deleted successfully"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  # Employees API
  /employees:
    get:
      summary: Get all employees
      description: Returns a list of all employees
      operationId: getAllEmployees
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of employees
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Employee"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      summary: Create a new employee
      description: Admin only - Create a new employee
      operationId: createEmployee
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEmployeeRequest"
      responses:
        "200":
          description: Employee created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /employees/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: Employee ID
    get:
      summary: Get employee by ID
      description: Returns a single employee by ID
      operationId: getEmployeeById
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Employee details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    put:
      summary: Update employee
      description: Admin only - Update employee details
      operationId: updateEmployee
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateEmployeeRequest"
      responses:
        "200":
          description: Employee updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      summary: Delete employee
      description: Admin only - Delete an employee
      operationId: deleteEmployee
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Employee deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Employee deleted successfully"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  # Requests API
  /requests:
    get:
      summary: Get all requests
      description: Returns a list of all requests
      operationId: getAllRequests
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of requests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Request"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      summary: Create a new request
      description: Create a new request
      operationId: createRequest
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRequestRequest"
      responses:
        "200":
          description: Request created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Request"
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /requests/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: Request ID
    get:
      summary: Get request by ID
      description: Returns a single request by ID
      operationId: getRequestById
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Request details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Request"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    put:
      summary: Update request
      description: Update request details
      operationId: updateRequest
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRequestRequest"
      responses:
        "200":
          description: Request updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Request"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      summary: Delete request
      description: Delete a request
      operationId: deleteRequest
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Request deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Request deleted successfully"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  # Workflows API
  /workflows:
    get:
      summary: Get all workflows
      description: Returns a list of all workflows
      operationId: getAllWorkflows
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of workflows
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Workflow"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      summary: Create a new workflow
      description: Admin only - Create a new workflow
      operationId: createWorkflow
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateWorkflowRequest"
      responses:
        "200":
          description: Workflow created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workflow"
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /workflows/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: Workflow ID
    get:
      summary: Get workflow by ID
      description: Returns a single workflow by ID
      operationId: getWorkflowById
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Workflow details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workflow"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    put:
      summary: Update workflow
      description: Admin only - Update workflow details
      operationId: updateWorkflow
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateWorkflowRequest"
      responses:
        "200":
          description: Workflow updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workflow"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      summary: Delete workflow
      description: Admin only - Delete a workflow
      operationId: deleteWorkflow
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Workflow deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Workflow deleted successfully"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid, or the user does not have access to perform the action
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthorized"
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Not Found"
  schemas:
    Department:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "IT Department"
        description:
          type: string
          example: "Information Technology Department"
        code:
          type: string
          example: "IT"
        location:
          type: string
          example: "Floor 3"
        accountId:
          type: integer
          example: 1
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CreateDepartmentRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "IT Department"
        description:
          type: string
          example: "Information Technology Department"
        code:
          type: string
          example: "IT"
        location:
          type: string
          example: "Floor 3"
        accountId:
          type: integer
          example: 1
    UpdateDepartmentRequest:
      type: object
      properties:
        name:
          type: string
          example: "IT Department"
        description:
          type: string
          example: "Information Technology Department"
        code:
          type: string
          example: "IT"
        location:
          type: string
          example: "Floor 3"
        accountId:
          type: integer
          example: 1

    Employee:
      type: object
      properties:
        id:
          type: integer
          example: 1
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        position:
          type: string
          example: "Software Engineer"
        departmentId:
          type: integer
          example: 1
        accountId:
          type: integer
          example: 1
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CreateEmployeeRequest:
      type: object
      required:
        - firstName
        - lastName
        - email
        - position
        - departmentId
      properties:
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        position:
          type: string
          example: "Software Engineer"
        departmentId:
          type: integer
          example: 1
        accountId:
          type: integer
          example: 1
    UpdateEmployeeRequest:
      type: object
      properties:
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        position:
          type: string
          example: "Software Engineer"
        departmentId:
          type: integer
          example: 1
        accountId:
          type: integer
          example: 1

    Request:
      type: object
      properties:
        id:
          type: integer
          example: 1
        type:
          type: string
          example: "Leave Request"
        status:
          type: string
          enum: [pending, approved, rejected]
          example: "pending"
        description:
          type: string
          example: "Annual leave request"
        employeeId:
          type: integer
          example: 1
        workflowId:
          type: integer
          example: 1
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CreateRequestRequest:
      type: object
      required:
        - type
        - description
        - employeeId
        - workflowId
      properties:
        type:
          type: string
          example: "Leave Request"
        description:
          type: string
          example: "Annual leave request"
        employeeId:
          type: integer
          example: 1
        workflowId:
          type: integer
          example: 1
    UpdateRequestRequest:
      type: object
      properties:
        type:
          type: string
          example: "Leave Request"
        status:
          type: string
          enum: [pending, approved, rejected]
          example: "approved"
        description:
          type: string
          example: "Annual leave request"
        employeeId:
          type: integer
          example: 1
        workflowId:
          type: integer
          example: 1

    Workflow:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Leave Approval Workflow"
        description:
          type: string
          example: "Standard workflow for leave requests"
        steps:
          type: array
          items:
            type: object
            properties:
              order:
                type: integer
                example: 1
              role:
                type: string
                example: "Manager"
              action:
                type: string
                example: "approve"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CreateWorkflowRequest:
      type: object
      required:
        - name
        - steps
      properties:
        name:
          type: string
          example: "Leave Approval Workflow"
        description:
          type: string
          example: "Standard workflow for leave requests"
        steps:
          type: array
          items:
            type: object
            properties:
              order:
                type: integer
                example: 1
              role:
                type: string
                example: "Manager"
              action:
                type: string
                example: "approve"
    UpdateWorkflowRequest:
      type: object
      properties:
        name:
          type: string
          example: "Leave Approval Workflow"
        description:
          type: string
          example: "Standard workflow for leave requests"
        steps:
          type: array
          items:
            type: object
            properties:
              order:
                type: integer
                example: 1
              role:
                type: string
                example: "Manager"
              action:
                type: string
                example: "approve"