import{a as h,b as u}from"./chunk-YOZUUFLZ.js";import{Ja as p,e as f,h as d,l as T,m as a,o as i}from"./chunk-ZYNGRVCC.js";function v(r){return()=>new Promise(l=>{let e=r.accountValue;if(!e||!e.jwtToken)return console.log("No stored account found during app initialization"),l(!0);console.log("Attempting to refresh token on app startup"),r.refreshToken().subscribe({next:()=>{console.log("Token refreshed successfully during app initialization"),l(!0)},error:o=>{console.error("Token refresh failed during app initialization:",o),l(!0)}})})}var j=(()=>{class r{constructor(e,o){this.accountService=e,this.router=o}intercept(e,o){return o.handle(e).pipe(d(t=>{console.error(`Error interceptor caught error (${t.status}):`,t);let s=e.url.includes("/refresh-token"),c=e.url.startsWith(h.apiUrl);t.status===401&&this.accountService.accountValue?s?(console.log("Token refresh failed with 401, logging out user"),this.accountService.logout()):c&&(console.log("API request failed with 401, redirecting to login"),this.router.navigate(["/account/login"],{queryParams:{returnUrl:this.router.url}})):t.status===403&&this.accountService.accountValue&&console.error("User not authorized (403 Forbidden)");let n="An unknown error occurred";return t.error instanceof ErrorEvent||t.error?.message?n=t.error.message:t.statusText&&(n=t.statusText),console.error("Error details:",n),f(()=>t)}))}static{this.\u0275fac=function(o){return new(o||r)(i(u),i(p))}}static{this.\u0275prov=a({token:r,factory:r.\u0275fac})}}return r})();var P=(()=>{class r{constructor(e){this.accountService=e}intercept(e,o){let t=this.accountService.accountValue,s=t&&t.jwtToken,c=e.url.startsWith(h.apiUrl);if(console.log(`JWT Interceptor - Request to: ${e.url}`),console.log(`JWT Interceptor - Is API URL: ${c}, Is Logged In: ${!!s}`),s&&c){console.log(`JWT Interceptor - Adding JWT token for user: ${t.email}, Role: ${t.role}`);let g=this.accountService.accountValue?.jwtToken||t.jwtToken;g?(e=e.clone({setHeaders:{Authorization:`Bearer ${g}`,"Content-Type":"application/json"},withCredentials:!0}),console.log("JWT Interceptor - Request modified with token")):console.error("JWT Interceptor - Token was missing even though user is logged in")}else c&&(console.warn(`JWT Interceptor - API request without authentication: ${e.url}`),e.headers.has("Content-Type")||(e=e.clone({setHeaders:{"Content-Type":"application/json"}})));return o.handle(e).pipe(T({next:n=>{n.type!==0&&console.log(`JWT Interceptor - Response for ${e.url}:`,n)}}),d(n=>(n.status===401?(console.error("JWT Interceptor - Authentication error (401):",n),s&&c&&console.warn("JWT Interceptor - Token is invalid or expired, logging out user")):n.status===403&&console.error("JWT Interceptor - Authorization error (403):",n),f(()=>n))))}static{this.\u0275fac=function(o){return new(o||r)(i(u))}}static{this.\u0275prov=a({token:r,factory:r.\u0275fac})}}return r})();function N(r,l){return e=>{let o=e.controls[r],t=e.controls[l];t.errors&&!t.errors.mustMatch||(o.value!==t.value?t.setErrors({mustMatch:!0}):t.setErrors(null))}}var W=(()=>{class r{constructor(e,o){this.router=e,this.accountService=o}canActivate(e,o){let t=this.accountService.accountValue;return console.log("==================== AUTH GUARD CALLED ===================="),console.log("Route:",e.url.map(s=>s.path).join("/")),console.log("Full URL:",o.url),console.log("Account present:",!!t),t?(console.log("User role:",t.role),console.log("Route requires roles:",e.data.roles),e.data.roles&&!e.data.roles.includes(t.role)?(console.log("Role not authorized, redirecting to home"),this.router.navigate(["/"]),!1):(console.log("User authorized to access route"),!0)):(console.log("User not logged in, redirecting to login"),this.router.navigate(["/account/login"],{queryParams:{returnUrl:o.url}}),!1)}static{this.\u0275fac=function(o){return new(o||r)(i(p),i(u))}}static{this.\u0275prov=a({token:r,factory:r.\u0275fac,providedIn:"root"})}}return r})();var S="angular-17-signup-verification-boilerplate-accounts",F=JSON.parse(localStorage.getItem(S)||"[]");export{v as a,W as b,j as c,P as d,N as e};
