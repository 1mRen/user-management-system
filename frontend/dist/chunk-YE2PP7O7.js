import{a as h,b as a}from"./chunk-YOZUUFLZ.js";import{Ja as p,e as f,h as d,l as g,m as c,o as i}from"./chunk-ZYNGRVCC.js";function v(r){return()=>new Promise(u=>{let e=r.accountValue;if(!e||!e.jwtToken)return console.log("No stored account found during app initialization"),u(!0);console.log("Attempting to refresh token on app startup"),r.refreshToken().subscribe({next:()=>{console.log("Token refreshed successfully during app initialization"),u(!0)},error:n=>{console.error("Token refresh failed during app initialization:",n),u(!0)}})})}var j=(()=>{class r{constructor(e,n){this.accountService=e,this.router=n}intercept(e,n){return n.handle(e).pipe(d(t=>{console.error(`Error interceptor caught error (${t.status}):`,t);let l=e.url.includes("/refresh-token"),s=e.url.startsWith(h.apiUrl);t.status===401&&this.accountService.accountValue?l?(console.log("Token refresh failed with 401, logging out user"),this.accountService.logout()):s&&(console.log("API request failed with 401, redirecting to login"),this.router.navigate(["/account/login"],{queryParams:{returnUrl:this.router.url}})):t.status===403&&this.accountService.accountValue&&console.error("User not authorized (403 Forbidden)");let o="An unknown error occurred";return t.error instanceof ErrorEvent||t.error?.message?o=t.error.message:t.statusText&&(o=t.statusText),console.error("Error details:",o),f(()=>t)}))}static{this.\u0275fac=function(n){return new(n||r)(i(a),i(p))}}static{this.\u0275prov=c({token:r,factory:r.\u0275fac})}}return r})();var R=(()=>{class r{constructor(e){this.accountService=e}intercept(e,n){let t=this.accountService.accountValue,l=t&&t.jwtToken,s=e.url.startsWith(h.apiUrl);if(console.log(`JWT Interceptor - Request to: ${e.url}`),console.log(`JWT Interceptor - Is API URL: ${s}, Is Logged In: ${!!l}`),l&&s){console.log(`JWT Interceptor - Adding JWT token for user: ${t.email}, Role: ${t.role}`);let T=this.accountService.accountValue?.jwtToken||t.jwtToken;T?(e=e.clone({setHeaders:{Authorization:`Bearer ${T}`,"Content-Type":"application/json"},withCredentials:!0}),console.log("JWT Interceptor - Request modified with token")):console.error("JWT Interceptor - Token was missing even though user is logged in")}else s&&(console.warn(`JWT Interceptor - API request without authentication: ${e.url}`),e.headers.has("Content-Type")||(e=e.clone({setHeaders:{"Content-Type":"application/json"}})));return n.handle(e).pipe(g({next:o=>{o.type!==0&&console.log(`JWT Interceptor - Response for ${e.url}:`,o)}}),d(o=>(o.status===401?(console.error("JWT Interceptor - Authentication error (401):",o),l&&s&&console.warn("JWT Interceptor - Token is invalid or expired, logging out user")):o.status===403&&console.error("JWT Interceptor - Authorization error (403):",o),f(()=>o))))}static{this.\u0275fac=function(n){return new(n||r)(i(a))}}static{this.\u0275prov=c({token:r,factory:r.\u0275fac})}}return r})();function N(r,u){return e=>{let n=e.controls[r],t=e.controls[u];t.errors&&!t.errors.mustMatch||(n.value!==t.value?t.setErrors({mustMatch:!0}):t.setErrors(null))}}var W=(()=>{class r{constructor(e,n){this.router=e,this.accountService=n}canActivate(e,n){let t=this.accountService.accountValue;return t?e.data.roles&&!e.data.roles.includes(t.role)?(this.router.navigate(["/"]),!1):!0:(this.router.navigate(["/account/login"],{queryParams:{returnUrl:n.url}}),!1)}static{this.\u0275fac=function(n){return new(n||r)(i(p),i(a))}}static{this.\u0275prov=c({token:r,factory:r.\u0275fac,providedIn:"root"})}}return r})();var S="angular-17-signup-verification-boilerplate-accounts",M=JSON.parse(localStorage.getItem(S)||"[]");export{v as a,W as b,j as c,R as d,N as e};
